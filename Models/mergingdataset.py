# -*- coding: utf-8 -*-
"""MergingDataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1orTGFMG9fB1z2rSWU30FbprxaJ5ZGT44
"""

import pandas as pd
import numpy as np
import seaborn as sb
from matplotlib import pyplot as plt
import seaborn as sns

hd = pd.read_csv('heart_data.csv')

hd

hd.head()

hd.isnull().sum().sum()

import seaborn as sns
corr = hd.corr()
sns.heatmap(corr, cmap='RdBu', vmin=-1, vmax=1, annot=True)

dataplot=sb.heatmap(hd.corr())

db = pd.read_csv('diabetes_data.csv')

db

db.head()

import seaborn as sns
corr = db.corr()
sns.heatmap(corr, cmap='RdBu', vmin=-1, vmax=1, annot=True)

dataplot=sb.heatmap(db.corr())

print("hd:")
display(hd.head())
print("db:")
display(db.head())

hd.rename(columns = {'sex':'Sex', 'chol':'HighChol', 'target':'HeartDiseaseorAttack', 'exang':'DiffWalk', 'trestbps':'HighBP'}, inplace = True)

hd.head()

hd['HeartDiseaseorAttack'].value_counts().plot(kind='bar', xlabel='hd dataset', ylabel='Count',figsize=(5,5), rot=0)

db['HeartDiseaseorAttack'].value_counts().plot(kind='bar', xlabel='db dataset', ylabel='Count',figsize=(5,5), rot=0)

"""#Features Visualisation"""

hd.hist(figsize=(20,20))
plt.show()

db.hist(figsize=(20,20))
plt.show()

#for i in hd:
#  fig, ax = plt.subplots(1,1, figsize=(15, 10))
#  sns.countplot(y = hd[i],data=hd, order=hd[i].value_counts().index, palette='Blues_r')
#  plt.ylabel(i)
#  plt.yticks(fontsize=6)
#  print("***************************************************************************************************************************************************")
#  plt.box(False)
#  plt.show()

hd['Sex'].value_counts().plot(kind='bar', xlabel='Sex distribution in hd dataset', ylabel='Count',figsize=(5,5), rot=0)

db['Sex'].value_counts().plot(kind='bar', xlabel='Sex distribution in db dataset', ylabel='Count',figsize=(5,5), rot=0)

fig, ax = plt.subplots(1,1, figsize=(15, 16))
sns.countplot(y = hd['age'], data=hd, palette='Blues_r')
plt.yticks(fontsize=8)
plt.box(False)
plt.show()

fig, ax = plt.subplots(1,1, figsize=(15, 19))
sns.countplot(y = hd['HighChol'], data=hd, palette='Blues_r')
plt.yticks(fontsize=8)
plt.box(False)
plt.show()

fig, ax = plt.subplots(1,1, figsize=(15, 10))
sns.countplot(y = hd['HighBP'], data=hd, palette='Blues_r')
plt.yticks(fontsize=8)
plt.box(False)
plt.show()

fig, ax = plt.subplots(1,1, figsize=(15, 10))
sns.countplot(y = hd['DiffWalk'], data=hd, palette='Blues_r')
plt.box(False)
plt.show()

fig, ax = plt.subplots(1,1, figsize=(15, 10))
sns.countplot(y = db['DiffWalk'], data=db, palette='Blues_r')
plt.box(False)
plt.show()

"""1. 240 and above is regarded as high cholestrol value;;
converting high values of cholestrol in hd dataset to 1 otherwise 0.

2. trestbps is blood pressure in hd dataset, converting high values to 1 otherwise 0.

3. exang is similar to DiffWalk in db dataset which is difficulty in walking or climbing stairs.

4. Sex is same.

5. Age is coded into range: 13-level age category
(1 = 18-24 / 2 = 25-29 / 3 = 30-34 / 4 = 35-39 / 5 = 40-44 /6 = 45-49 / 7 = 50-54 / 8 = 55-59 / 9 = 60-64 / 10 = 65-69 /11 = 70-74 / 12 = 75-79 / 13 = 80 or older)

#Converting cholestrol values to binary
"""

hd['HighChol'] = (hd['HighChol'] > 240).astype(int)
print(hd)

hd.head()

hd['HighChol'].value_counts().plot(kind='bar', xlabel='Cholesterol of hd dataset', ylabel='Count',figsize=(5,5), rot=0)

db['HighChol'].value_counts().plot(kind='bar', xlabel='Cholesterol of db dataset', ylabel='Count',figsize=(5,5), rot=0)

"""#Converting BP to binary"""

hd['HighBP'] = (hd['HighBP'] > 140).astype(int)
print(hd)

db.tail()

hd['HighBP'].value_counts().plot(kind='bar', xlabel='BP of hd dataset', ylabel='Count',figsize=(5,5), rot=0)

db['HighBP'].value_counts().plot(kind='bar', xlabel='BP of db dataset', ylabel='Count',figsize=(5,5), rot=0)

print("hd:")
display(hd.head())
print("db:")
display(db.head())

"""#Converting age in hd dataframe to coded value given in features"""

hd.rename(columns = {'age':'Age'}, inplace = True)

hd['Age'] = np.where(
    (hd['Age'] <=24) & (hd['Age'] >=18), 1, hd['Age']
    )

hd['Age'] = np.where(
    (hd['Age'] <=29) & (hd['Age'] >=25), 2, hd['Age']
    )

#hd['Age'] = np.where(
 #   ((hd['Age'] <=34) & (hd['Age'] >=30))|((hd['Age'] <=39) & (hd['Age'] >=35))|((hd['Age'] <=44) & (hd['Age'] >=40))|((hd['Age'] <=49) & (hd['Age'] >=45))|((hd['Age'] <=54) & (hd['Age'] >=50))|((hd['Age'] <=59) & (hd['Age'] >=55))|((hd['Age'] <=64) & (hd['Age'] >=60))|((hd['Age'] <=69) & (hd['Age'] >=65))|((hd['Age'] <=74) & (hd['Age'] >=70))|((hd['Age'] <=79) & (hd['Age'] >=75))|((hd['Age'] >=80)), 3,4,5,6,7,8,9,10,11,12,13, hd['Age']
 #   )

hd['Age'] = np.where(
    (hd['Age'] <=34) & (hd['Age'] >=30), 3, hd['Age']
    )

hd['Age'] = np.where(
    (hd['Age'] <=39) & (hd['Age'] >=35), 4, hd['Age']
    )

hd['Age'] = np.where(
    (hd['Age'] <=44) & (hd['Age'] >=40), 5, hd['Age']
    )

hd['Age'] = np.where(
    (hd['Age'] <=49) & (hd['Age'] >=45), 6, hd['Age']
    )

hd['Age'] = np.where(
    (hd['Age'] <=54) & (hd['Age'] >=50), 7, hd['Age']
    )

hd['Age'] = np.where(
    (hd['Age'] <=59) & (hd['Age'] >=55), 8, hd['Age']
    )

hd['Age'] = np.where(
    (hd['Age'] <=64) & (hd['Age'] >=60), 9, hd['Age']
    )

hd['Age'] = np.where(
    (hd['Age'] <=69) & (hd['Age'] >=65), 10, hd['Age']
    )

hd['Age'] = np.where(
    (hd['Age'] <=74) & (hd['Age'] >=70), 11, hd['Age']
    )

hd['Age'] = np.where(
    (hd['Age'] <=79) & (hd['Age'] >=75), 12, hd['Age']
    )

hd['Age'] = np.where(
    (hd['Age'] >=80), 13, hd['Age']
    )

hd.head()

hd['Age'].value_counts().plot(kind='bar', xlabel='Age of Heart Disease Dataset', ylabel='Count',figsize=(15, 10), rot=0)

db['Age'].value_counts().plot(kind='bar', xlabel='Age of Diabetes Dataset', ylabel='Count',figsize=(15, 10), rot=0)

print("hd:")
display(hd.head())
print("db:")
display(db.head())

hd['DiffWalk'].value_counts().plot(kind='bar', xlabel='hd', ylabel='Count',figsize=(5, 5), rot=0)

db['DiffWalk'].value_counts().plot(kind='bar', xlabel='db', ylabel='Count',figsize=(5, 5), rot=0)

"""#Merging"""

#outer = pd.merge(hd, db, on='Age', how='outer')
#outer[['Sex','HighCol','HeartDiseaseorAttack','DiffWalk']]

fd = pd.merge(db,hd)

fd

fd.tail()

from google.colab import drive
drive.mount('/content/drive')

fd.to_csv('fd.csv')

#from google.colab import files
#files.download("fd.csv")

#dropping features that are not required
data=fd.drop(['CholCheck','HvyAlcoholConsump','MentHlth','GenHlth','PhysHlth'],axis=1)
data.head()

#splitting the data into input data features and target
X=data.drop('Diabetes',axis=1)
y=data['Diabetes']

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB,BernoulliNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score,classification_report

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=105,stratify=y)
print(X_train.shape)
print(X_test.shape)

scaler=StandardScaler()
X_train_scaled=scaler.fit_transform(X_train)
X_test_scaled=scaler.transform(X_test)

accuracy_model=pd.DataFrame(columns=['Model','Accuracy'])

#Defining a function to standardize the model testing process
def model_train_test(model):
    model.fit(X_train_scaled,y_train)
    y_pred=model.predict(X_test_scaled)
    print(classification_report(y_test,y_pred))
    plot_confusion_matrix(model,X_test_scaled,y_test)

grid={"C":np.logspace(-3,3,7), "penalty":["l1","l2"]}
logreg=LogisticRegression()
logreg_cv=GridSearchCV(logreg,grid,cv=10)
model_train_test(logreg_cv)

